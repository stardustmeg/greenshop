$transition-duration: 0.2s;
$transform-scale: 0.9;
$transform-scale-active: 0.9;
$filter-opacity: 0.5;
$filter-brightness: 1.3;
$basic-font: var(--regular-font);
$one: var(--one);
$two: var(--two);
$active-color: var(--steam-green-800);

@mixin switchLabel {
  position: relative;
  display: inline-block;
  width: var(--large-offset);
  height: calc(calc(var(--small-offset) / 1.5) + var(--extra-small-offset));
  cursor: pointer;
}

@mixin switchCheckbox {
  width: 0;
  height: 0;
  opacity: 1;
}

@mixin switchLabelSpan($label-span-color: var(--noble-gray-tr-800), $label-span-before-color: var(--steam-green-800)) {
  position: absolute;
  border-radius: calc(var(--large-br) * 2);
  background-color: $label-span-color;
  transition: 0.3s cubic-bezier(0.8, 0.5, 0.2, 1.4);
  cursor: pointer;
  pointer-events: none;
  inset: 0;

  &::before {
    content: '';
    position: absolute;
    left: calc(var(--one) * 5);
    top: 50%;
    bottom: 0;
    z-index: 2;
    border-radius: var(--large-br);
    width: calc(var(--small-offset) / 1.5);
    height: calc(var(--small-offset) / 1.5);
    box-shadow: var(--mellow-shadow-600);
    background-color: $label-span-before-color;
    transform: translateY(-50%);
    transition: 0.3s cubic-bezier(0.8, 0.5, 0.2, 1.4);
  }
}

@mixin link($padding: 0 calc(var(--extra-small-offset) / 2), $color: var(--noble-gray-800)) {
  position: relative;
  display: flex;
  align-items: center;
  padding: $padding;
  height: 100%;
  font: $basic-font;
  letter-spacing: $one;
  text-transform: uppercase;
  color: $color;
  transition: color $transition-duration;

  &::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: calc($one * -1);
    width: 100%;
    height: $two;
    background-color: currentcolor;
    opacity: 0;
    transform: scaleX(0);
    transform-origin: center;
    transition:
      transform $transition-duration,
      opacity $transition-duration;
  }

  @media (hover: hover) {
    &:hover {
      color: $active-color;

      &::after {
        opacity: 1;
        transform: scaleX(1);
      }
    }
  }
}

@mixin active {
  color: $active-color;
  opacity: 1;

  &::after {
    opacity: 1;
    transform: scaleX(1);
  }
}

@mixin green-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  justify-self: center;
  border-radius: var(--medium-br);
  padding: calc(var(--small-offset) / 3) var(--small-offset);
  width: max-content;
  font: $basic-font;
  letter-spacing: $one;
  color: var(--button-white);
  background-color: $active-color;
  transition:
    filter $transition-duration,
    color $transition-duration,
    background-color $transition-duration,
    transform $transition-duration;

  svg {
    fill: var(--noble-gray-900);
    stroke: var(--noble-gray-900);
    transition:
      fill $transition-duration,
      stroke $transition-duration;
  }

  @media (hover: hover) {
    &:hover {
      filter: brightness($filter-brightness);

      svg {
        fill: var(--noble-gray-1000);
        stroke: var(--noble-gray-1000);
      }
    }
  }

  /* stylelint-disable-next-line order/order */
  &:active {
    transform: scale($transform-scale-active);
  }

  &:disabled {
    filter: opacity($filter-opacity);
    pointer-events: none;
  }
}

@mixin round-btn(
  $btn-padding: calc(var(--tiny-offset) * 1.5),
  $btn-bg: var(--noble-white-100),
  $btn-hover-bg: var(--white-tr),
  $btn-fill: $active-color,
  $btn-stroke: $active-color
) {
  display: flex;
  align-items: center;
  justify-content: center;
  justify-self: center;
  border-radius: 50%;
  padding: $btn-padding;
  width: fit-content;
  background-color: $btn-bg;
  transition:
    filter $transition-duration,
    color $transition-duration,
    background-color $transition-duration,
    transform $transition-duration,
    opacity $transition-duration;

  @media (hover: hover) {
    &:hover {
      background-color: $btn-hover-bg;

      svg {
        fill: $btn-fill;
        stroke: $btn-stroke;
      }
    }
    /* stylelint-disable-next-line order/order */
    &:active {
      transform: scale($transform-scale-active);
    }

    &:disabled {
      filter: opacity($filter-opacity);
      pointer-events: none;
    }
  }
}

@mixin svg-logo(
  $logo-width: var(--small-offset),
  $logo-height: var(--small-offset),
  $logo-fill: var(--noble-gray-900),
  $logo-stroke: var(--noble-gray-900)
) {
  display: flex;
  align-items: center;
  justify-content: center;
  justify-self: center;

  svg {
    width: $logo-width;
    height: $logo-height;
    fill: $logo-fill;
    stroke: $logo-stroke;
    transition:
      fill $transition-duration,
      stroke $transition-duration;
  }
}

@mixin gradient-outline-linear($border-width, $color-center, $color-outer, $direction: to right) {
  border: $border-width solid transparent;
  border-image: linear-gradient($direction, $color-center 50%, $color-outer 100%) 1;
  border-image-slice: 1;
}

@mixin gradient-border-bottom-linear($border-width, $color-center, $color-outer, $direction: to right) {
  border-bottom: $border-width solid transparent;
  background-image: linear-gradient($direction, $color-center, $color-outer);
  background-position: 0 calc(100% + #{$border-width});
  background-size: 100% $border-width;
  background-repeat: no-repeat;
}
